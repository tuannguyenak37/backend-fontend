import axios from "axios";
import dotenv from "dotenv";
dotenv.config();

const fallbackFlowers = [
  {
    name_SP: "Hoa h·ªìng ƒë·ªè",
    gia_SP: 200000,
    mota_SP: "hoa t∆∞∆°i t·ª´ ƒê√† L·∫°t",
  },
  {
    name_SP: "Hoa c√∫c m√πa thu",
    gia_SP: 150000,
    mota_SP: "hoa c√∫c tr·ªìng t∆∞∆°i s·∫°ch",
  },
  {
    name_SP: "hoa h·ªìng ph·∫•n",
    gia_SP: 250000,
    mota_SP: "hoa h·ªìng ph·∫•n tr·∫Øng ƒë·∫∑c bi·ªát nh·∫≠p kh·∫©u t·ª´ Ph√°p",
  },
  {
    name_SP: "gi·ªè hoa s·∫∑c s·ª°",
    gia_SP: 220000,
    mota_SP: "Gi·ªè hoa g·ªìm nhi·ªÅu lo·∫°i hoa do th·ª£ chuy√™n c·∫Øm hoa t·ªâ m·ªâ",
  },
  {
    name_SP: "Hoa h·ªìng tr·∫Øng b√≥",
    gia_SP: 600000,
    mota_SP:
      "Th·ªÉ hi·ªán s·ª± tinh t·∫ø, sang tr·ªçng, tao nh√£ ‚Äì m·ªôt kh·ªüi ƒë·∫ßu m·ªõi trong cu·ªôc s·ªëng",
  },
  {
    name_SP: "Hoa h·ªìng v√†ng",
    gia_SP: 70000,
    mota_SP:
      "L·ªùi ch√∫c ƒë·∫ßy hi v·ªçng v√† t√≠ch c·ª±c ‚Äì m·ªôt l·ªùi c·∫£m ∆°n nh·∫π nh√†ng nh∆∞ng s√¢u s·∫Øc",
  },
  {
    name_SP: "Hoa h·ªìng xanh bi·ªÉn b√≥",
    gia_SP: 800000,
    mota_SP:
      "Mang ƒë·∫øn ni·ªÅm tin v√† s·ª©c m·∫°nh cho ƒëi·ªÅu t∆∞·ªüng ch·ª´ng kh√¥ng th·ªÉ th·ª±c hi·ªán ƒë∆∞·ª£c",
  },
];

const ChatBot = async (req, res) => {
  const { text, bio, interests } = req.body;

  if (!text || text.trim() === "") {
    return res
      .status(400)
      .json({ success: false, error: "Thi·∫øu n·ªôi dung tin nh·∫Øn" });
  }

  // üëâ G·ªçi API s·∫£n ph·∫©m ho·∫∑c fallback n·∫øu l·ªói
  const getProductData = async () => {
    try {
      const [flowers, gifs, combos] = await Promise.all([
        axios.get("https://backendflower-9t22.onrender.com/api/productList"),
        axios.get("https://backendflower-9t22.onrender.com/api/productListGif"),
        axios.get(
          "https://backendflower-9t22.onrender.com/api/productListCombo"
        ),
      ]);

      return {
        flowers: flowers.data?.data || [],
        gifs: gifs.data?.data || [],
        combos: combos.data?.data || [],
      };
    } catch (err) {
      console.error("‚ùå L·ªói g·ªçi API s·∫£n ph·∫©m:", err.message);
      return {
        flowers: fallbackFlowers,
        gifs: [],
        combos: [],
      };
    }
  };

  const productData = await getProductData();

  const formatProducts = (items, title) => {
    if (!items || items.length === 0) return "";
    return (
      `\nüå∏ ${title}:\n` +
      items
        .slice(0, 5)
        .map(
          (item) =>
            `- ${item.name_SP} (${item.gia_SP.toLocaleString()} VNƒê): ${
              item.mota_SP
            }`
        )
        .join("\n")
    );
  };

  const productSummary = `
üõçÔ∏è M·ªôt v√†i s·∫£n ph·∫©m g·ª£i √Ω:
${formatProducts(productData.flowers, "Hoa t∆∞∆°i")}
${formatProducts(productData.gifs, "Qu√† t·∫∑ng")}
${formatProducts(productData.combos, "Combo ƒë·∫∑c bi·ªát")}
  `;

  const systemPrompt = `B·∫°n l√† m·ªôt c√¥ g√°i d·ªÖ th∆∞∆°ng chuy√™n t∆∞ v·∫•n b√°n hoa v√† qu√† t·∫∑ng. B·∫°n c√≥ th·ªÉ tr·∫£ l·ªùi ng·∫Øn g·ªçn, t·ª± nhi√™n v√† th√¢n thi·ªán.
S·ªü th√≠ch: ${interests || "hoa, qu√† t·∫∑ng, l√£ng m·∫°n"}.
Bio: ${bio || "T√¥i th√≠ch hoa v√† gi√∫p m·ªçi ng∆∞·ªùi ch·ªçn qu√† üéÅ"}.

D∆∞·ªõi ƒë√¢y l√† danh s√°ch s·∫£n ph·∫©m ƒë·ªÉ b·∫°n t∆∞ v·∫•n:
${productSummary}

G·ª£i √Ω: H√£y d√πng bi·ªÉu t∆∞·ª£ng c·∫£m x√∫c khi th√≠ch h·ª£p. Tr·∫£ l·ªùi nh∆∞ m·ªôt ng∆∞·ªùi b·∫°n, c√≥ ch√∫t l·∫£ l∆°i c≈©ng ƒë∆∞·ª£c üòâ.`;

  try {
    const openaiRes = await axios.post(
      "https://api.openai.com/v1/chat/completions",
      {
        model: "gpt-4o-mini",
        messages: [
          { role: "system", content: systemPrompt },
          { role: "user", content: text },
        ],
      },
      {
        headers: {
          Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
          "Content-Type": "application/json",
        },
      }
    );

    const message =
      openaiRes.data?.choices?.[0]?.message?.content || "‚ùå Kh√¥ng c√≥ ph·∫£n h·ªìi";

    console.log("ü§ñ Bot tr·∫£ l·ªùi:", message);

    res.json({ success: true, message });
  } catch (err) {
    console.error("‚ùå L·ªói g·ªçi OpenAI:", err.message);
    res.status(500).json({
      success: false,
      message: "Bot hi·ªán kh√¥ng ph·∫£n h·ªìi ƒë∆∞·ª£c, b·∫°n th·ª≠ l·∫°i sau ch√∫t nh√© üò¢",
    });
  }
};

export default ChatBot;
